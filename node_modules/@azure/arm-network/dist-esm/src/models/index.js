/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ApplicationGatewaySkuName} that the service accepts. */
export var KnownApplicationGatewaySkuName;
(function (KnownApplicationGatewaySkuName) {
    KnownApplicationGatewaySkuName["StandardSmall"] = "Standard_Small";
    KnownApplicationGatewaySkuName["StandardMedium"] = "Standard_Medium";
    KnownApplicationGatewaySkuName["StandardLarge"] = "Standard_Large";
    KnownApplicationGatewaySkuName["WAFMedium"] = "WAF_Medium";
    KnownApplicationGatewaySkuName["WAFLarge"] = "WAF_Large";
    KnownApplicationGatewaySkuName["StandardV2"] = "Standard_v2";
    KnownApplicationGatewaySkuName["WAFV2"] = "WAF_v2";
})(KnownApplicationGatewaySkuName || (KnownApplicationGatewaySkuName = {}));
/** Known values of {@link ApplicationGatewayTier} that the service accepts. */
export var KnownApplicationGatewayTier;
(function (KnownApplicationGatewayTier) {
    KnownApplicationGatewayTier["Standard"] = "Standard";
    KnownApplicationGatewayTier["WAF"] = "WAF";
    KnownApplicationGatewayTier["StandardV2"] = "Standard_v2";
    KnownApplicationGatewayTier["WAFV2"] = "WAF_v2";
})(KnownApplicationGatewayTier || (KnownApplicationGatewayTier = {}));
/** Known values of {@link ApplicationGatewaySslProtocol} that the service accepts. */
export var KnownApplicationGatewaySslProtocol;
(function (KnownApplicationGatewaySslProtocol) {
    KnownApplicationGatewaySslProtocol["TLSv10"] = "TLSv1_0";
    KnownApplicationGatewaySslProtocol["TLSv11"] = "TLSv1_1";
    KnownApplicationGatewaySslProtocol["TLSv12"] = "TLSv1_2";
})(KnownApplicationGatewaySslProtocol || (KnownApplicationGatewaySslProtocol = {}));
/** Known values of {@link ApplicationGatewaySslPolicyType} that the service accepts. */
export var KnownApplicationGatewaySslPolicyType;
(function (KnownApplicationGatewaySslPolicyType) {
    KnownApplicationGatewaySslPolicyType["Predefined"] = "Predefined";
    KnownApplicationGatewaySslPolicyType["Custom"] = "Custom";
})(KnownApplicationGatewaySslPolicyType || (KnownApplicationGatewaySslPolicyType = {}));
/** Known values of {@link ApplicationGatewaySslPolicyName} that the service accepts. */
export var KnownApplicationGatewaySslPolicyName;
(function (KnownApplicationGatewaySslPolicyName) {
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20150501"] = "AppGwSslPolicy20150501";
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20170401"] = "AppGwSslPolicy20170401";
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20170401S"] = "AppGwSslPolicy20170401S";
})(KnownApplicationGatewaySslPolicyName || (KnownApplicationGatewaySslPolicyName = {}));
/** Known values of {@link ApplicationGatewaySslCipherSuite} that the service accepts. */
export var KnownApplicationGatewaySslCipherSuite;
(function (KnownApplicationGatewaySslCipherSuite) {
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256CBCSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128CBCSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES256GCMSHA384"] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES128GCMSHA256"] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES256CBCSHA"] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES128CBCSHA"] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256GCMSHA384"] = "TLS_RSA_WITH_AES_256_GCM_SHA384";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128GCMSHA256"] = "TLS_RSA_WITH_AES_128_GCM_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256CBCSHA256"] = "TLS_RSA_WITH_AES_256_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128CBCSHA256"] = "TLS_RSA_WITH_AES_128_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256CBCSHA"] = "TLS_RSA_WITH_AES_256_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128CBCSHA"] = "TLS_RSA_WITH_AES_128_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256GCMSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128GCMSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256CBCSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128CBCSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES256CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES128CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES256CBCSHA"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES128CBCSHA"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSRSAWith3DESEDECBCSHA"] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWith3DESEDECBCSHA"] = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128GCMSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256GCMSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
})(KnownApplicationGatewaySslCipherSuite || (KnownApplicationGatewaySslCipherSuite = {}));
/** Known values of {@link ApplicationGatewayOperationalState} that the service accepts. */
export var KnownApplicationGatewayOperationalState;
(function (KnownApplicationGatewayOperationalState) {
    KnownApplicationGatewayOperationalState["Stopped"] = "Stopped";
    KnownApplicationGatewayOperationalState["Starting"] = "Starting";
    KnownApplicationGatewayOperationalState["Running"] = "Running";
    KnownApplicationGatewayOperationalState["Stopping"] = "Stopping";
})(KnownApplicationGatewayOperationalState || (KnownApplicationGatewayOperationalState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    KnownProvisioningState["Succeeded"] = "Succeeded";
    KnownProvisioningState["Updating"] = "Updating";
    KnownProvisioningState["Deleting"] = "Deleting";
    KnownProvisioningState["Failed"] = "Failed";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link IPAllocationMethod} that the service accepts. */
export var KnownIPAllocationMethod;
(function (KnownIPAllocationMethod) {
    KnownIPAllocationMethod["Static"] = "Static";
    KnownIPAllocationMethod["Dynamic"] = "Dynamic";
})(KnownIPAllocationMethod || (KnownIPAllocationMethod = {}));
/** Known values of {@link ApplicationGatewayProtocol} that the service accepts. */
export var KnownApplicationGatewayProtocol;
(function (KnownApplicationGatewayProtocol) {
    KnownApplicationGatewayProtocol["Http"] = "Http";
    KnownApplicationGatewayProtocol["Https"] = "Https";
})(KnownApplicationGatewayProtocol || (KnownApplicationGatewayProtocol = {}));
/** Known values of {@link IPVersion} that the service accepts. */
export var KnownIPVersion;
(function (KnownIPVersion) {
    KnownIPVersion["IPv4"] = "IPv4";
    KnownIPVersion["IPv6"] = "IPv6";
})(KnownIPVersion || (KnownIPVersion = {}));
/** Known values of {@link SecurityRuleProtocol} that the service accepts. */
export var KnownSecurityRuleProtocol;
(function (KnownSecurityRuleProtocol) {
    KnownSecurityRuleProtocol["Tcp"] = "Tcp";
    KnownSecurityRuleProtocol["Udp"] = "Udp";
    KnownSecurityRuleProtocol["Icmp"] = "Icmp";
    KnownSecurityRuleProtocol["Esp"] = "Esp";
    KnownSecurityRuleProtocol["Asterisk"] = "*";
    KnownSecurityRuleProtocol["Ah"] = "Ah";
})(KnownSecurityRuleProtocol || (KnownSecurityRuleProtocol = {}));
/** Known values of {@link SecurityRuleAccess} that the service accepts. */
export var KnownSecurityRuleAccess;
(function (KnownSecurityRuleAccess) {
    KnownSecurityRuleAccess["Allow"] = "Allow";
    KnownSecurityRuleAccess["Deny"] = "Deny";
})(KnownSecurityRuleAccess || (KnownSecurityRuleAccess = {}));
/** Known values of {@link SecurityRuleDirection} that the service accepts. */
export var KnownSecurityRuleDirection;
(function (KnownSecurityRuleDirection) {
    KnownSecurityRuleDirection["Inbound"] = "Inbound";
    KnownSecurityRuleDirection["Outbound"] = "Outbound";
})(KnownSecurityRuleDirection || (KnownSecurityRuleDirection = {}));
/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export var KnownExtendedLocationTypes;
(function (KnownExtendedLocationTypes) {
    KnownExtendedLocationTypes["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
/** Known values of {@link NetworkInterfaceNicType} that the service accepts. */
export var KnownNetworkInterfaceNicType;
(function (KnownNetworkInterfaceNicType) {
    KnownNetworkInterfaceNicType["Standard"] = "Standard";
    KnownNetworkInterfaceNicType["Elastic"] = "Elastic";
})(KnownNetworkInterfaceNicType || (KnownNetworkInterfaceNicType = {}));
/** Known values of {@link NetworkInterfaceMigrationPhase} that the service accepts. */
export var KnownNetworkInterfaceMigrationPhase;
(function (KnownNetworkInterfaceMigrationPhase) {
    KnownNetworkInterfaceMigrationPhase["None"] = "None";
    KnownNetworkInterfaceMigrationPhase["Prepare"] = "Prepare";
    KnownNetworkInterfaceMigrationPhase["Commit"] = "Commit";
    KnownNetworkInterfaceMigrationPhase["Abort"] = "Abort";
    KnownNetworkInterfaceMigrationPhase["Committed"] = "Committed";
})(KnownNetworkInterfaceMigrationPhase || (KnownNetworkInterfaceMigrationPhase = {}));
/** Known values of {@link FlowLogFormatType} that the service accepts. */
export var KnownFlowLogFormatType;
(function (KnownFlowLogFormatType) {
    KnownFlowLogFormatType["Json"] = "JSON";
})(KnownFlowLogFormatType || (KnownFlowLogFormatType = {}));
/** Known values of {@link RouteNextHopType} that the service accepts. */
export var KnownRouteNextHopType;
(function (KnownRouteNextHopType) {
    KnownRouteNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    KnownRouteNextHopType["VnetLocal"] = "VnetLocal";
    KnownRouteNextHopType["Internet"] = "Internet";
    KnownRouteNextHopType["VirtualAppliance"] = "VirtualAppliance";
    KnownRouteNextHopType["None"] = "None";
})(KnownRouteNextHopType || (KnownRouteNextHopType = {}));
/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export var KnownPublicIPAddressSkuName;
(function (KnownPublicIPAddressSkuName) {
    KnownPublicIPAddressSkuName["Basic"] = "Basic";
    KnownPublicIPAddressSkuName["Standard"] = "Standard";
})(KnownPublicIPAddressSkuName || (KnownPublicIPAddressSkuName = {}));
/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export var KnownPublicIPAddressSkuTier;
(function (KnownPublicIPAddressSkuTier) {
    KnownPublicIPAddressSkuTier["Regional"] = "Regional";
    KnownPublicIPAddressSkuTier["Global"] = "Global";
})(KnownPublicIPAddressSkuTier || (KnownPublicIPAddressSkuTier = {}));
/** Known values of {@link DdosSettingsProtectionCoverage} that the service accepts. */
export var KnownDdosSettingsProtectionCoverage;
(function (KnownDdosSettingsProtectionCoverage) {
    KnownDdosSettingsProtectionCoverage["Basic"] = "Basic";
    KnownDdosSettingsProtectionCoverage["Standard"] = "Standard";
})(KnownDdosSettingsProtectionCoverage || (KnownDdosSettingsProtectionCoverage = {}));
/** Known values of {@link NatGatewaySkuName} that the service accepts. */
export var KnownNatGatewaySkuName;
(function (KnownNatGatewaySkuName) {
    KnownNatGatewaySkuName["Standard"] = "Standard";
})(KnownNatGatewaySkuName || (KnownNatGatewaySkuName = {}));
/** Known values of {@link PublicIPAddressMigrationPhase} that the service accepts. */
export var KnownPublicIPAddressMigrationPhase;
(function (KnownPublicIPAddressMigrationPhase) {
    KnownPublicIPAddressMigrationPhase["None"] = "None";
    KnownPublicIPAddressMigrationPhase["Prepare"] = "Prepare";
    KnownPublicIPAddressMigrationPhase["Commit"] = "Commit";
    KnownPublicIPAddressMigrationPhase["Abort"] = "Abort";
    KnownPublicIPAddressMigrationPhase["Committed"] = "Committed";
})(KnownPublicIPAddressMigrationPhase || (KnownPublicIPAddressMigrationPhase = {}));
/** Known values of {@link DeleteOptions} that the service accepts. */
export var KnownDeleteOptions;
(function (KnownDeleteOptions) {
    KnownDeleteOptions["Delete"] = "Delete";
    KnownDeleteOptions["Detach"] = "Detach";
})(KnownDeleteOptions || (KnownDeleteOptions = {}));
/** Known values of {@link VirtualNetworkPrivateEndpointNetworkPolicies} that the service accepts. */
export var KnownVirtualNetworkPrivateEndpointNetworkPolicies;
(function (KnownVirtualNetworkPrivateEndpointNetworkPolicies) {
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["Enabled"] = "Enabled";
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["Disabled"] = "Disabled";
})(KnownVirtualNetworkPrivateEndpointNetworkPolicies || (KnownVirtualNetworkPrivateEndpointNetworkPolicies = {}));
/** Known values of {@link VirtualNetworkPrivateLinkServiceNetworkPolicies} that the service accepts. */
export var KnownVirtualNetworkPrivateLinkServiceNetworkPolicies;
(function (KnownVirtualNetworkPrivateLinkServiceNetworkPolicies) {
    KnownVirtualNetworkPrivateLinkServiceNetworkPolicies["Enabled"] = "Enabled";
    KnownVirtualNetworkPrivateLinkServiceNetworkPolicies["Disabled"] = "Disabled";
})(KnownVirtualNetworkPrivateLinkServiceNetworkPolicies || (KnownVirtualNetworkPrivateLinkServiceNetworkPolicies = {}));
/** Known values of {@link GatewayLoadBalancerTunnelProtocol} that the service accepts. */
export var KnownGatewayLoadBalancerTunnelProtocol;
(function (KnownGatewayLoadBalancerTunnelProtocol) {
    KnownGatewayLoadBalancerTunnelProtocol["None"] = "None";
    KnownGatewayLoadBalancerTunnelProtocol["Native"] = "Native";
    KnownGatewayLoadBalancerTunnelProtocol["Vxlan"] = "VXLAN";
})(KnownGatewayLoadBalancerTunnelProtocol || (KnownGatewayLoadBalancerTunnelProtocol = {}));
/** Known values of {@link GatewayLoadBalancerTunnelInterfaceType} that the service accepts. */
export var KnownGatewayLoadBalancerTunnelInterfaceType;
(function (KnownGatewayLoadBalancerTunnelInterfaceType) {
    KnownGatewayLoadBalancerTunnelInterfaceType["None"] = "None";
    KnownGatewayLoadBalancerTunnelInterfaceType["Internal"] = "Internal";
    KnownGatewayLoadBalancerTunnelInterfaceType["External"] = "External";
})(KnownGatewayLoadBalancerTunnelInterfaceType || (KnownGatewayLoadBalancerTunnelInterfaceType = {}));
/** Known values of {@link TransportProtocol} that the service accepts. */
export var KnownTransportProtocol;
(function (KnownTransportProtocol) {
    KnownTransportProtocol["Udp"] = "Udp";
    KnownTransportProtocol["Tcp"] = "Tcp";
    KnownTransportProtocol["All"] = "All";
})(KnownTransportProtocol || (KnownTransportProtocol = {}));
/** Known values of {@link ApplicationGatewayCookieBasedAffinity} that the service accepts. */
export var KnownApplicationGatewayCookieBasedAffinity;
(function (KnownApplicationGatewayCookieBasedAffinity) {
    KnownApplicationGatewayCookieBasedAffinity["Enabled"] = "Enabled";
    KnownApplicationGatewayCookieBasedAffinity["Disabled"] = "Disabled";
})(KnownApplicationGatewayCookieBasedAffinity || (KnownApplicationGatewayCookieBasedAffinity = {}));
/** Known values of {@link ApplicationGatewayCustomErrorStatusCode} that the service accepts. */
export var KnownApplicationGatewayCustomErrorStatusCode;
(function (KnownApplicationGatewayCustomErrorStatusCode) {
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus403"] = "HttpStatus403";
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus502"] = "HttpStatus502";
})(KnownApplicationGatewayCustomErrorStatusCode || (KnownApplicationGatewayCustomErrorStatusCode = {}));
/** Known values of {@link ApplicationGatewayRequestRoutingRuleType} that the service accepts. */
export var KnownApplicationGatewayRequestRoutingRuleType;
(function (KnownApplicationGatewayRequestRoutingRuleType) {
    KnownApplicationGatewayRequestRoutingRuleType["Basic"] = "Basic";
    KnownApplicationGatewayRequestRoutingRuleType["PathBasedRouting"] = "PathBasedRouting";
})(KnownApplicationGatewayRequestRoutingRuleType || (KnownApplicationGatewayRequestRoutingRuleType = {}));
/** Known values of {@link ApplicationGatewayRedirectType} that the service accepts. */
export var KnownApplicationGatewayRedirectType;
(function (KnownApplicationGatewayRedirectType) {
    KnownApplicationGatewayRedirectType["Permanent"] = "Permanent";
    KnownApplicationGatewayRedirectType["Found"] = "Found";
    KnownApplicationGatewayRedirectType["SeeOther"] = "SeeOther";
    KnownApplicationGatewayRedirectType["Temporary"] = "Temporary";
})(KnownApplicationGatewayRedirectType || (KnownApplicationGatewayRedirectType = {}));
/** Known values of {@link ApplicationGatewayFirewallMode} that the service accepts. */
export var KnownApplicationGatewayFirewallMode;
(function (KnownApplicationGatewayFirewallMode) {
    KnownApplicationGatewayFirewallMode["Detection"] = "Detection";
    KnownApplicationGatewayFirewallMode["Prevention"] = "Prevention";
})(KnownApplicationGatewayFirewallMode || (KnownApplicationGatewayFirewallMode = {}));
/** Known values of {@link ApplicationGatewayLoadDistributionAlgorithm} that the service accepts. */
export var KnownApplicationGatewayLoadDistributionAlgorithm;
(function (KnownApplicationGatewayLoadDistributionAlgorithm) {
    KnownApplicationGatewayLoadDistributionAlgorithm["RoundRobin"] = "RoundRobin";
    KnownApplicationGatewayLoadDistributionAlgorithm["LeastConnections"] = "LeastConnections";
    KnownApplicationGatewayLoadDistributionAlgorithm["IpHash"] = "IpHash";
})(KnownApplicationGatewayLoadDistributionAlgorithm || (KnownApplicationGatewayLoadDistributionAlgorithm = {}));
/** Known values of {@link ApplicationGatewayBackendHealthServerHealth} that the service accepts. */
export var KnownApplicationGatewayBackendHealthServerHealth;
(function (KnownApplicationGatewayBackendHealthServerHealth) {
    KnownApplicationGatewayBackendHealthServerHealth["Unknown"] = "Unknown";
    KnownApplicationGatewayBackendHealthServerHealth["Up"] = "Up";
    KnownApplicationGatewayBackendHealthServerHealth["Down"] = "Down";
    KnownApplicationGatewayBackendHealthServerHealth["Partial"] = "Partial";
    KnownApplicationGatewayBackendHealthServerHealth["Draining"] = "Draining";
})(KnownApplicationGatewayBackendHealthServerHealth || (KnownApplicationGatewayBackendHealthServerHealth = {}));
/** Known values of {@link AzureFirewallRCActionType} that the service accepts. */
export var KnownAzureFirewallRCActionType;
(function (KnownAzureFirewallRCActionType) {
    KnownAzureFirewallRCActionType["Allow"] = "Allow";
    KnownAzureFirewallRCActionType["Deny"] = "Deny";
})(KnownAzureFirewallRCActionType || (KnownAzureFirewallRCActionType = {}));
/** Known values of {@link AzureFirewallApplicationRuleProtocolType} that the service accepts. */
export var KnownAzureFirewallApplicationRuleProtocolType;
(function (KnownAzureFirewallApplicationRuleProtocolType) {
    KnownAzureFirewallApplicationRuleProtocolType["Http"] = "Http";
    KnownAzureFirewallApplicationRuleProtocolType["Https"] = "Https";
    KnownAzureFirewallApplicationRuleProtocolType["Mssql"] = "Mssql";
})(KnownAzureFirewallApplicationRuleProtocolType || (KnownAzureFirewallApplicationRuleProtocolType = {}));
/** Known values of {@link AzureFirewallNatRCActionType} that the service accepts. */
export var KnownAzureFirewallNatRCActionType;
(function (KnownAzureFirewallNatRCActionType) {
    KnownAzureFirewallNatRCActionType["Snat"] = "Snat";
    KnownAzureFirewallNatRCActionType["Dnat"] = "Dnat";
})(KnownAzureFirewallNatRCActionType || (KnownAzureFirewallNatRCActionType = {}));
/** Known values of {@link AzureFirewallNetworkRuleProtocol} that the service accepts. */
export var KnownAzureFirewallNetworkRuleProtocol;
(function (KnownAzureFirewallNetworkRuleProtocol) {
    KnownAzureFirewallNetworkRuleProtocol["TCP"] = "TCP";
    KnownAzureFirewallNetworkRuleProtocol["UDP"] = "UDP";
    KnownAzureFirewallNetworkRuleProtocol["Any"] = "Any";
    KnownAzureFirewallNetworkRuleProtocol["Icmp"] = "ICMP";
})(KnownAzureFirewallNetworkRuleProtocol || (KnownAzureFirewallNetworkRuleProtocol = {}));
/** Known values of {@link AzureFirewallThreatIntelMode} that the service accepts. */
export var KnownAzureFirewallThreatIntelMode;
(function (KnownAzureFirewallThreatIntelMode) {
    KnownAzureFirewallThreatIntelMode["Alert"] = "Alert";
    KnownAzureFirewallThreatIntelMode["Deny"] = "Deny";
    KnownAzureFirewallThreatIntelMode["Off"] = "Off";
})(KnownAzureFirewallThreatIntelMode || (KnownAzureFirewallThreatIntelMode = {}));
/** Known values of {@link AzureFirewallSkuName} that the service accepts. */
export var KnownAzureFirewallSkuName;
(function (KnownAzureFirewallSkuName) {
    KnownAzureFirewallSkuName["AzfwVnet"] = "AZFW_VNet";
    KnownAzureFirewallSkuName["AzfwHub"] = "AZFW_Hub";
})(KnownAzureFirewallSkuName || (KnownAzureFirewallSkuName = {}));
/** Known values of {@link AzureFirewallSkuTier} that the service accepts. */
export var KnownAzureFirewallSkuTier;
(function (KnownAzureFirewallSkuTier) {
    KnownAzureFirewallSkuTier["Standard"] = "Standard";
    KnownAzureFirewallSkuTier["Premium"] = "Premium";
    KnownAzureFirewallSkuTier["Basic"] = "Basic";
})(KnownAzureFirewallSkuTier || (KnownAzureFirewallSkuTier = {}));
/** Known values of {@link BastionHostSkuName} that the service accepts. */
export var KnownBastionHostSkuName;
(function (KnownBastionHostSkuName) {
    KnownBastionHostSkuName["Basic"] = "Basic";
    KnownBastionHostSkuName["Standard"] = "Standard";
})(KnownBastionHostSkuName || (KnownBastionHostSkuName = {}));
/** Known values of {@link BastionConnectProtocol} that the service accepts. */
export var KnownBastionConnectProtocol;
(function (KnownBastionConnectProtocol) {
    KnownBastionConnectProtocol["SSH"] = "SSH";
    KnownBastionConnectProtocol["RDP"] = "RDP";
})(KnownBastionConnectProtocol || (KnownBastionConnectProtocol = {}));
/** Known values of {@link CommissionedState} that the service accepts. */
export var KnownCommissionedState;
(function (KnownCommissionedState) {
    KnownCommissionedState["Provisioning"] = "Provisioning";
    KnownCommissionedState["Provisioned"] = "Provisioned";
    KnownCommissionedState["Commissioning"] = "Commissioning";
    KnownCommissionedState["Commissioned"] = "Commissioned";
    KnownCommissionedState["Decommissioning"] = "Decommissioning";
    KnownCommissionedState["Deprovisioning"] = "Deprovisioning";
})(KnownCommissionedState || (KnownCommissionedState = {}));
/** Known values of {@link DdosCustomPolicyProtocol} that the service accepts. */
export var KnownDdosCustomPolicyProtocol;
(function (KnownDdosCustomPolicyProtocol) {
    KnownDdosCustomPolicyProtocol["Tcp"] = "Tcp";
    KnownDdosCustomPolicyProtocol["Udp"] = "Udp";
    KnownDdosCustomPolicyProtocol["Syn"] = "Syn";
})(KnownDdosCustomPolicyProtocol || (KnownDdosCustomPolicyProtocol = {}));
/** Known values of {@link DdosCustomPolicyTriggerSensitivityOverride} that the service accepts. */
export var KnownDdosCustomPolicyTriggerSensitivityOverride;
(function (KnownDdosCustomPolicyTriggerSensitivityOverride) {
    KnownDdosCustomPolicyTriggerSensitivityOverride["Relaxed"] = "Relaxed";
    KnownDdosCustomPolicyTriggerSensitivityOverride["Low"] = "Low";
    KnownDdosCustomPolicyTriggerSensitivityOverride["Default"] = "Default";
    KnownDdosCustomPolicyTriggerSensitivityOverride["High"] = "High";
})(KnownDdosCustomPolicyTriggerSensitivityOverride || (KnownDdosCustomPolicyTriggerSensitivityOverride = {}));
/** Known values of {@link ProtocolType} that the service accepts. */
export var KnownProtocolType;
(function (KnownProtocolType) {
    KnownProtocolType["DoNotUse"] = "DoNotUse";
    KnownProtocolType["Icmp"] = "Icmp";
    KnownProtocolType["Tcp"] = "Tcp";
    KnownProtocolType["Udp"] = "Udp";
    KnownProtocolType["Gre"] = "Gre";
    KnownProtocolType["Esp"] = "Esp";
    KnownProtocolType["Ah"] = "Ah";
    KnownProtocolType["Vxlan"] = "Vxlan";
    KnownProtocolType["All"] = "All";
})(KnownProtocolType || (KnownProtocolType = {}));
/** Known values of {@link AuthorizationUseStatus} that the service accepts. */
export var KnownAuthorizationUseStatus;
(function (KnownAuthorizationUseStatus) {
    KnownAuthorizationUseStatus["Available"] = "Available";
    KnownAuthorizationUseStatus["InUse"] = "InUse";
})(KnownAuthorizationUseStatus || (KnownAuthorizationUseStatus = {}));
/** Known values of {@link ExpressRoutePeeringType} that the service accepts. */
export var KnownExpressRoutePeeringType;
(function (KnownExpressRoutePeeringType) {
    KnownExpressRoutePeeringType["AzurePublicPeering"] = "AzurePublicPeering";
    KnownExpressRoutePeeringType["AzurePrivatePeering"] = "AzurePrivatePeering";
    KnownExpressRoutePeeringType["MicrosoftPeering"] = "MicrosoftPeering";
})(KnownExpressRoutePeeringType || (KnownExpressRoutePeeringType = {}));
/** Known values of {@link ExpressRoutePeeringState} that the service accepts. */
export var KnownExpressRoutePeeringState;
(function (KnownExpressRoutePeeringState) {
    KnownExpressRoutePeeringState["Disabled"] = "Disabled";
    KnownExpressRoutePeeringState["Enabled"] = "Enabled";
})(KnownExpressRoutePeeringState || (KnownExpressRoutePeeringState = {}));
/** Known values of {@link ExpressRouteCircuitPeeringAdvertisedPublicPrefixState} that the service accepts. */
export var KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
(function (KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState) {
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["NotConfigured"] = "NotConfigured";
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configuring"] = "Configuring";
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configured"] = "Configured";
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["ValidationNeeded"] = "ValidationNeeded";
})(KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState || (KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {}));
/** Known values of {@link ExpressRouteCircuitPeeringState} that the service accepts. */
export var KnownExpressRouteCircuitPeeringState;
(function (KnownExpressRouteCircuitPeeringState) {
    KnownExpressRouteCircuitPeeringState["Disabled"] = "Disabled";
    KnownExpressRouteCircuitPeeringState["Enabled"] = "Enabled";
})(KnownExpressRouteCircuitPeeringState || (KnownExpressRouteCircuitPeeringState = {}));
/** Known values of {@link CircuitConnectionStatus} that the service accepts. */
export var KnownCircuitConnectionStatus;
(function (KnownCircuitConnectionStatus) {
    KnownCircuitConnectionStatus["Connected"] = "Connected";
    KnownCircuitConnectionStatus["Connecting"] = "Connecting";
    KnownCircuitConnectionStatus["Disconnected"] = "Disconnected";
})(KnownCircuitConnectionStatus || (KnownCircuitConnectionStatus = {}));
/** Known values of {@link ExpressRouteCircuitSkuTier} that the service accepts. */
export var KnownExpressRouteCircuitSkuTier;
(function (KnownExpressRouteCircuitSkuTier) {
    KnownExpressRouteCircuitSkuTier["Standard"] = "Standard";
    KnownExpressRouteCircuitSkuTier["Premium"] = "Premium";
    KnownExpressRouteCircuitSkuTier["Basic"] = "Basic";
    KnownExpressRouteCircuitSkuTier["Local"] = "Local";
})(KnownExpressRouteCircuitSkuTier || (KnownExpressRouteCircuitSkuTier = {}));
/** Known values of {@link ExpressRouteCircuitSkuFamily} that the service accepts. */
export var KnownExpressRouteCircuitSkuFamily;
(function (KnownExpressRouteCircuitSkuFamily) {
    KnownExpressRouteCircuitSkuFamily["UnlimitedData"] = "UnlimitedData";
    KnownExpressRouteCircuitSkuFamily["MeteredData"] = "MeteredData";
})(KnownExpressRouteCircuitSkuFamily || (KnownExpressRouteCircuitSkuFamily = {}));
/** Known values of {@link ServiceProviderProvisioningState} that the service accepts. */
export var KnownServiceProviderProvisioningState;
(function (KnownServiceProviderProvisioningState) {
    KnownServiceProviderProvisioningState["NotProvisioned"] = "NotProvisioned";
    KnownServiceProviderProvisioningState["Provisioning"] = "Provisioning";
    KnownServiceProviderProvisioningState["Provisioned"] = "Provisioned";
    KnownServiceProviderProvisioningState["Deprovisioning"] = "Deprovisioning";
})(KnownServiceProviderProvisioningState || (KnownServiceProviderProvisioningState = {}));
/** Known values of {@link ExpressRoutePortsEncapsulation} that the service accepts. */
export var KnownExpressRoutePortsEncapsulation;
(function (KnownExpressRoutePortsEncapsulation) {
    KnownExpressRoutePortsEncapsulation["Dot1Q"] = "Dot1Q";
    KnownExpressRoutePortsEncapsulation["QinQ"] = "QinQ";
})(KnownExpressRoutePortsEncapsulation || (KnownExpressRoutePortsEncapsulation = {}));
/** Known values of {@link ExpressRouteLinkConnectorType} that the service accepts. */
export var KnownExpressRouteLinkConnectorType;
(function (KnownExpressRouteLinkConnectorType) {
    KnownExpressRouteLinkConnectorType["LC"] = "LC";
    KnownExpressRouteLinkConnectorType["SC"] = "SC";
})(KnownExpressRouteLinkConnectorType || (KnownExpressRouteLinkConnectorType = {}));
/** Known values of {@link ExpressRouteLinkAdminState} that the service accepts. */
export var KnownExpressRouteLinkAdminState;
(function (KnownExpressRouteLinkAdminState) {
    KnownExpressRouteLinkAdminState["Enabled"] = "Enabled";
    KnownExpressRouteLinkAdminState["Disabled"] = "Disabled";
})(KnownExpressRouteLinkAdminState || (KnownExpressRouteLinkAdminState = {}));
/** Known values of {@link ExpressRouteLinkMacSecCipher} that the service accepts. */
export var KnownExpressRouteLinkMacSecCipher;
(function (KnownExpressRouteLinkMacSecCipher) {
    KnownExpressRouteLinkMacSecCipher["GcmAes256"] = "GcmAes256";
    KnownExpressRouteLinkMacSecCipher["GcmAes128"] = "GcmAes128";
    KnownExpressRouteLinkMacSecCipher["GcmAesXpn128"] = "GcmAesXpn128";
    KnownExpressRouteLinkMacSecCipher["GcmAesXpn256"] = "GcmAesXpn256";
})(KnownExpressRouteLinkMacSecCipher || (KnownExpressRouteLinkMacSecCipher = {}));
/** Known values of {@link ExpressRouteLinkMacSecSciState} that the service accepts. */
export var KnownExpressRouteLinkMacSecSciState;
(function (KnownExpressRouteLinkMacSecSciState) {
    KnownExpressRouteLinkMacSecSciState["Disabled"] = "Disabled";
    KnownExpressRouteLinkMacSecSciState["Enabled"] = "Enabled";
})(KnownExpressRouteLinkMacSecSciState || (KnownExpressRouteLinkMacSecSciState = {}));
/** Known values of {@link FirewallPolicyIntrusionDetectionStateType} that the service accepts. */
export var KnownFirewallPolicyIntrusionDetectionStateType;
(function (KnownFirewallPolicyIntrusionDetectionStateType) {
    KnownFirewallPolicyIntrusionDetectionStateType["Off"] = "Off";
    KnownFirewallPolicyIntrusionDetectionStateType["Alert"] = "Alert";
    KnownFirewallPolicyIntrusionDetectionStateType["Deny"] = "Deny";
})(KnownFirewallPolicyIntrusionDetectionStateType || (KnownFirewallPolicyIntrusionDetectionStateType = {}));
/** Known values of {@link FirewallPolicyIntrusionDetectionProtocol} that the service accepts. */
export var KnownFirewallPolicyIntrusionDetectionProtocol;
(function (KnownFirewallPolicyIntrusionDetectionProtocol) {
    KnownFirewallPolicyIntrusionDetectionProtocol["TCP"] = "TCP";
    KnownFirewallPolicyIntrusionDetectionProtocol["UDP"] = "UDP";
    KnownFirewallPolicyIntrusionDetectionProtocol["Icmp"] = "ICMP";
    KnownFirewallPolicyIntrusionDetectionProtocol["ANY"] = "ANY";
})(KnownFirewallPolicyIntrusionDetectionProtocol || (KnownFirewallPolicyIntrusionDetectionProtocol = {}));
/** Known values of {@link FirewallPolicySkuTier} that the service accepts. */
export var KnownFirewallPolicySkuTier;
(function (KnownFirewallPolicySkuTier) {
    KnownFirewallPolicySkuTier["Standard"] = "Standard";
    KnownFirewallPolicySkuTier["Premium"] = "Premium";
    KnownFirewallPolicySkuTier["Basic"] = "Basic";
})(KnownFirewallPolicySkuTier || (KnownFirewallPolicySkuTier = {}));
/** Known values of {@link FirewallPolicyRuleCollectionType} that the service accepts. */
export var KnownFirewallPolicyRuleCollectionType;
(function (KnownFirewallPolicyRuleCollectionType) {
    KnownFirewallPolicyRuleCollectionType["FirewallPolicyNatRuleCollection"] = "FirewallPolicyNatRuleCollection";
    KnownFirewallPolicyRuleCollectionType["FirewallPolicyFilterRuleCollection"] = "FirewallPolicyFilterRuleCollection";
})(KnownFirewallPolicyRuleCollectionType || (KnownFirewallPolicyRuleCollectionType = {}));
/** Known values of {@link OrderByOrder} that the service accepts. */
export var KnownOrderByOrder;
(function (KnownOrderByOrder) {
    KnownOrderByOrder["Ascending"] = "Ascending";
    KnownOrderByOrder["Descending"] = "Descending";
})(KnownOrderByOrder || (KnownOrderByOrder = {}));
/** Known values of {@link Enum69} that the service accepts. */
export var KnownEnum69;
(function (KnownEnum69) {
    KnownEnum69[KnownEnum69["Zero"] = 0] = "Zero";
    KnownEnum69[KnownEnum69["One"] = 1] = "One";
    KnownEnum69[KnownEnum69["Two"] = 2] = "Two";
})(KnownEnum69 || (KnownEnum69 = {}));
/** Known values of {@link Enum70} that the service accepts. */
export var KnownEnum70;
(function (KnownEnum70) {
    KnownEnum70[KnownEnum70["One"] = 1] = "One";
    KnownEnum70[KnownEnum70["Two"] = 2] = "Two";
    KnownEnum70[KnownEnum70["Three"] = 3] = "Three";
})(KnownEnum70 || (KnownEnum70 = {}));
/** Known values of {@link Enum71} that the service accepts. */
export var KnownEnum71;
(function (KnownEnum71) {
    KnownEnum71[KnownEnum71["Zero"] = 0] = "Zero";
    KnownEnum71[KnownEnum71["One"] = 1] = "One";
    KnownEnum71[KnownEnum71["Two"] = 2] = "Two";
})(KnownEnum71 || (KnownEnum71 = {}));
/** Known values of {@link IpAllocationType} that the service accepts. */
export var KnownIpAllocationType;
(function (KnownIpAllocationType) {
    KnownIpAllocationType["Undefined"] = "Undefined";
    KnownIpAllocationType["Hypernet"] = "Hypernet";
})(KnownIpAllocationType || (KnownIpAllocationType = {}));
/** Known values of {@link LoadBalancerSkuName} that the service accepts. */
export var KnownLoadBalancerSkuName;
(function (KnownLoadBalancerSkuName) {
    KnownLoadBalancerSkuName["Basic"] = "Basic";
    KnownLoadBalancerSkuName["Standard"] = "Standard";
    KnownLoadBalancerSkuName["Gateway"] = "Gateway";
})(KnownLoadBalancerSkuName || (KnownLoadBalancerSkuName = {}));
/** Known values of {@link LoadBalancerSkuTier} that the service accepts. */
export var KnownLoadBalancerSkuTier;
(function (KnownLoadBalancerSkuTier) {
    KnownLoadBalancerSkuTier["Regional"] = "Regional";
    KnownLoadBalancerSkuTier["Global"] = "Global";
})(KnownLoadBalancerSkuTier || (KnownLoadBalancerSkuTier = {}));
/** Known values of {@link LoadDistribution} that the service accepts. */
export var KnownLoadDistribution;
(function (KnownLoadDistribution) {
    KnownLoadDistribution["Default"] = "Default";
    KnownLoadDistribution["SourceIP"] = "SourceIP";
    KnownLoadDistribution["SourceIPProtocol"] = "SourceIPProtocol";
})(KnownLoadDistribution || (KnownLoadDistribution = {}));
/** Known values of {@link ProbeProtocol} that the service accepts. */
export var KnownProbeProtocol;
(function (KnownProbeProtocol) {
    KnownProbeProtocol["Http"] = "Http";
    KnownProbeProtocol["Tcp"] = "Tcp";
    KnownProbeProtocol["Https"] = "Https";
})(KnownProbeProtocol || (KnownProbeProtocol = {}));
/** Known values of {@link LoadBalancerOutboundRuleProtocol} that the service accepts. */
export var KnownLoadBalancerOutboundRuleProtocol;
(function (KnownLoadBalancerOutboundRuleProtocol) {
    KnownLoadBalancerOutboundRuleProtocol["Tcp"] = "Tcp";
    KnownLoadBalancerOutboundRuleProtocol["Udp"] = "Udp";
    KnownLoadBalancerOutboundRuleProtocol["All"] = "All";
})(KnownLoadBalancerOutboundRuleProtocol || (KnownLoadBalancerOutboundRuleProtocol = {}));
/** Known values of {@link EffectiveRouteSource} that the service accepts. */
export var KnownEffectiveRouteSource;
(function (KnownEffectiveRouteSource) {
    KnownEffectiveRouteSource["Unknown"] = "Unknown";
    KnownEffectiveRouteSource["User"] = "User";
    KnownEffectiveRouteSource["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    KnownEffectiveRouteSource["Default"] = "Default";
})(KnownEffectiveRouteSource || (KnownEffectiveRouteSource = {}));
/** Known values of {@link EffectiveRouteState} that the service accepts. */
export var KnownEffectiveRouteState;
(function (KnownEffectiveRouteState) {
    KnownEffectiveRouteState["Active"] = "Active";
    KnownEffectiveRouteState["Invalid"] = "Invalid";
})(KnownEffectiveRouteState || (KnownEffectiveRouteState = {}));
/** Known values of {@link EffectiveSecurityRuleProtocol} that the service accepts. */
export var KnownEffectiveSecurityRuleProtocol;
(function (KnownEffectiveSecurityRuleProtocol) {
    KnownEffectiveSecurityRuleProtocol["Tcp"] = "Tcp";
    KnownEffectiveSecurityRuleProtocol["Udp"] = "Udp";
    KnownEffectiveSecurityRuleProtocol["All"] = "All";
})(KnownEffectiveSecurityRuleProtocol || (KnownEffectiveSecurityRuleProtocol = {}));
/** Known values of {@link InboundSecurityRulesProtocol} that the service accepts. */
export var KnownInboundSecurityRulesProtocol;
(function (KnownInboundSecurityRulesProtocol) {
    KnownInboundSecurityRulesProtocol["TCP"] = "TCP";
    KnownInboundSecurityRulesProtocol["UDP"] = "UDP";
})(KnownInboundSecurityRulesProtocol || (KnownInboundSecurityRulesProtocol = {}));
/** Known values of {@link AssociationType} that the service accepts. */
export var KnownAssociationType;
(function (KnownAssociationType) {
    KnownAssociationType["Associated"] = "Associated";
    KnownAssociationType["Contains"] = "Contains";
})(KnownAssociationType || (KnownAssociationType = {}));
/** Known values of {@link Direction} that the service accepts. */
export var KnownDirection;
(function (KnownDirection) {
    KnownDirection["Inbound"] = "Inbound";
    KnownDirection["Outbound"] = "Outbound";
})(KnownDirection || (KnownDirection = {}));
/** Known values of {@link IpFlowProtocol} that the service accepts. */
export var KnownIpFlowProtocol;
(function (KnownIpFlowProtocol) {
    KnownIpFlowProtocol["TCP"] = "TCP";
    KnownIpFlowProtocol["UDP"] = "UDP";
})(KnownIpFlowProtocol || (KnownIpFlowProtocol = {}));
/** Known values of {@link Access} that the service accepts. */
export var KnownAccess;
(function (KnownAccess) {
    KnownAccess["Allow"] = "Allow";
    KnownAccess["Deny"] = "Deny";
})(KnownAccess || (KnownAccess = {}));
/** Known values of {@link NextHopType} that the service accepts. */
export var KnownNextHopType;
(function (KnownNextHopType) {
    KnownNextHopType["Internet"] = "Internet";
    KnownNextHopType["VirtualAppliance"] = "VirtualAppliance";
    KnownNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    KnownNextHopType["VnetLocal"] = "VnetLocal";
    KnownNextHopType["HyperNetGateway"] = "HyperNetGateway";
    KnownNextHopType["None"] = "None";
})(KnownNextHopType || (KnownNextHopType = {}));
/** Known values of {@link PcProtocol} that the service accepts. */
export var KnownPcProtocol;
(function (KnownPcProtocol) {
    KnownPcProtocol["TCP"] = "TCP";
    KnownPcProtocol["UDP"] = "UDP";
    KnownPcProtocol["Any"] = "Any";
})(KnownPcProtocol || (KnownPcProtocol = {}));
/** Known values of {@link PcStatus} that the service accepts. */
export var KnownPcStatus;
(function (KnownPcStatus) {
    KnownPcStatus["NotStarted"] = "NotStarted";
    KnownPcStatus["Running"] = "Running";
    KnownPcStatus["Stopped"] = "Stopped";
    KnownPcStatus["Error"] = "Error";
    KnownPcStatus["Unknown"] = "Unknown";
})(KnownPcStatus || (KnownPcStatus = {}));
/** Known values of {@link PcError} that the service accepts. */
export var KnownPcError;
(function (KnownPcError) {
    KnownPcError["InternalError"] = "InternalError";
    KnownPcError["AgentStopped"] = "AgentStopped";
    KnownPcError["CaptureFailed"] = "CaptureFailed";
    KnownPcError["LocalFileFailed"] = "LocalFileFailed";
    KnownPcError["StorageFailed"] = "StorageFailed";
})(KnownPcError || (KnownPcError = {}));
/** Known values of {@link Protocol} that the service accepts. */
export var KnownProtocol;
(function (KnownProtocol) {
    KnownProtocol["Tcp"] = "Tcp";
    KnownProtocol["Http"] = "Http";
    KnownProtocol["Https"] = "Https";
    KnownProtocol["Icmp"] = "Icmp";
})(KnownProtocol || (KnownProtocol = {}));
/** Known values of {@link HttpMethod} that the service accepts. */
export var KnownHttpMethod;
(function (KnownHttpMethod) {
    KnownHttpMethod["Get"] = "Get";
})(KnownHttpMethod || (KnownHttpMethod = {}));
/** Known values of {@link Origin} that the service accepts. */
export var KnownOrigin;
(function (KnownOrigin) {
    KnownOrigin["Local"] = "Local";
    KnownOrigin["Inbound"] = "Inbound";
    KnownOrigin["Outbound"] = "Outbound";
})(KnownOrigin || (KnownOrigin = {}));
/** Known values of {@link Severity} that the service accepts. */
export var KnownSeverity;
(function (KnownSeverity) {
    KnownSeverity["Error"] = "Error";
    KnownSeverity["Warning"] = "Warning";
})(KnownSeverity || (KnownSeverity = {}));
/** Known values of {@link IssueType} that the service accepts. */
export var KnownIssueType;
(function (KnownIssueType) {
    KnownIssueType["Unknown"] = "Unknown";
    KnownIssueType["AgentStopped"] = "AgentStopped";
    KnownIssueType["GuestFirewall"] = "GuestFirewall";
    KnownIssueType["DnsResolution"] = "DnsResolution";
    KnownIssueType["SocketBind"] = "SocketBind";
    KnownIssueType["NetworkSecurityRule"] = "NetworkSecurityRule";
    KnownIssueType["UserDefinedRoute"] = "UserDefinedRoute";
    KnownIssueType["PortThrottled"] = "PortThrottled";
    KnownIssueType["Platform"] = "Platform";
})(KnownIssueType || (KnownIssueType = {}));
/** Known values of {@link ConnectionStatus} that the service accepts. */
export var KnownConnectionStatus;
(function (KnownConnectionStatus) {
    KnownConnectionStatus["Unknown"] = "Unknown";
    KnownConnectionStatus["Connected"] = "Connected";
    KnownConnectionStatus["Disconnected"] = "Disconnected";
    KnownConnectionStatus["Degraded"] = "Degraded";
})(KnownConnectionStatus || (KnownConnectionStatus = {}));
/** Known values of {@link VerbosityLevel} that the service accepts. */
export var KnownVerbosityLevel;
(function (KnownVerbosityLevel) {
    KnownVerbosityLevel["Normal"] = "Normal";
    KnownVerbosityLevel["Minimum"] = "Minimum";
    KnownVerbosityLevel["Full"] = "Full";
})(KnownVerbosityLevel || (KnownVerbosityLevel = {}));
/** Known values of {@link EndpointType} that the service accepts. */
export var KnownEndpointType;
(function (KnownEndpointType) {
    KnownEndpointType["AzureVM"] = "AzureVM";
    KnownEndpointType["AzureVNet"] = "AzureVNet";
    KnownEndpointType["AzureSubnet"] = "AzureSubnet";
    KnownEndpointType["ExternalAddress"] = "ExternalAddress";
    KnownEndpointType["MMAWorkspaceMachine"] = "MMAWorkspaceMachine";
    KnownEndpointType["MMAWorkspaceNetwork"] = "MMAWorkspaceNetwork";
})(KnownEndpointType || (KnownEndpointType = {}));
/** Known values of {@link ConnectionMonitorEndpointFilterType} that the service accepts. */
export var KnownConnectionMonitorEndpointFilterType;
(function (KnownConnectionMonitorEndpointFilterType) {
    KnownConnectionMonitorEndpointFilterType["Include"] = "Include";
})(KnownConnectionMonitorEndpointFilterType || (KnownConnectionMonitorEndpointFilterType = {}));
/** Known values of {@link ConnectionMonitorEndpointFilterItemType} that the service accepts. */
export var KnownConnectionMonitorEndpointFilterItemType;
(function (KnownConnectionMonitorEndpointFilterItemType) {
    KnownConnectionMonitorEndpointFilterItemType["AgentAddress"] = "AgentAddress";
})(KnownConnectionMonitorEndpointFilterItemType || (KnownConnectionMonitorEndpointFilterItemType = {}));
/** Known values of {@link CoverageLevel} that the service accepts. */
export var KnownCoverageLevel;
(function (KnownCoverageLevel) {
    KnownCoverageLevel["Default"] = "Default";
    KnownCoverageLevel["Low"] = "Low";
    KnownCoverageLevel["BelowAverage"] = "BelowAverage";
    KnownCoverageLevel["Average"] = "Average";
    KnownCoverageLevel["AboveAverage"] = "AboveAverage";
    KnownCoverageLevel["Full"] = "Full";
})(KnownCoverageLevel || (KnownCoverageLevel = {}));
/** Known values of {@link ConnectionMonitorTestConfigurationProtocol} that the service accepts. */
export var KnownConnectionMonitorTestConfigurationProtocol;
(function (KnownConnectionMonitorTestConfigurationProtocol) {
    KnownConnectionMonitorTestConfigurationProtocol["Tcp"] = "Tcp";
    KnownConnectionMonitorTestConfigurationProtocol["Http"] = "Http";
    KnownConnectionMonitorTestConfigurationProtocol["Icmp"] = "Icmp";
})(KnownConnectionMonitorTestConfigurationProtocol || (KnownConnectionMonitorTestConfigurationProtocol = {}));
/** Known values of {@link PreferredIPVersion} that the service accepts. */
export var KnownPreferredIPVersion;
(function (KnownPreferredIPVersion) {
    KnownPreferredIPVersion["IPv4"] = "IPv4";
    KnownPreferredIPVersion["IPv6"] = "IPv6";
})(KnownPreferredIPVersion || (KnownPreferredIPVersion = {}));
/** Known values of {@link HttpConfigurationMethod} that the service accepts. */
export var KnownHttpConfigurationMethod;
(function (KnownHttpConfigurationMethod) {
    KnownHttpConfigurationMethod["Get"] = "Get";
    KnownHttpConfigurationMethod["Post"] = "Post";
})(KnownHttpConfigurationMethod || (KnownHttpConfigurationMethod = {}));
/** Known values of {@link DestinationPortBehavior} that the service accepts. */
export var KnownDestinationPortBehavior;
(function (KnownDestinationPortBehavior) {
    KnownDestinationPortBehavior["None"] = "None";
    KnownDestinationPortBehavior["ListenIfAvailable"] = "ListenIfAvailable";
})(KnownDestinationPortBehavior || (KnownDestinationPortBehavior = {}));
/** Known values of {@link OutputType} that the service accepts. */
export var KnownOutputType;
(function (KnownOutputType) {
    KnownOutputType["Workspace"] = "Workspace";
})(KnownOutputType || (KnownOutputType = {}));
/** Known values of {@link ConnectionMonitorType} that the service accepts. */
export var KnownConnectionMonitorType;
(function (KnownConnectionMonitorType) {
    KnownConnectionMonitorType["MultiEndpoint"] = "MultiEndpoint";
    KnownConnectionMonitorType["SingleSourceDestination"] = "SingleSourceDestination";
})(KnownConnectionMonitorType || (KnownConnectionMonitorType = {}));
/** Known values of {@link ConnectionMonitorSourceStatus} that the service accepts. */
export var KnownConnectionMonitorSourceStatus;
(function (KnownConnectionMonitorSourceStatus) {
    KnownConnectionMonitorSourceStatus["Unknown"] = "Unknown";
    KnownConnectionMonitorSourceStatus["Active"] = "Active";
    KnownConnectionMonitorSourceStatus["Inactive"] = "Inactive";
})(KnownConnectionMonitorSourceStatus || (KnownConnectionMonitorSourceStatus = {}));
/** Known values of {@link ConnectionState} that the service accepts. */
export var KnownConnectionState;
(function (KnownConnectionState) {
    KnownConnectionState["Reachable"] = "Reachable";
    KnownConnectionState["Unreachable"] = "Unreachable";
    KnownConnectionState["Unknown"] = "Unknown";
})(KnownConnectionState || (KnownConnectionState = {}));
/** Known values of {@link EvaluationState} that the service accepts. */
export var KnownEvaluationState;
(function (KnownEvaluationState) {
    KnownEvaluationState["NotStarted"] = "NotStarted";
    KnownEvaluationState["InProgress"] = "InProgress";
    KnownEvaluationState["Completed"] = "Completed";
})(KnownEvaluationState || (KnownEvaluationState = {}));
/** Known values of {@link PublicIPPrefixSkuName} that the service accepts. */
export var KnownPublicIPPrefixSkuName;
(function (KnownPublicIPPrefixSkuName) {
    KnownPublicIPPrefixSkuName["Standard"] = "Standard";
})(KnownPublicIPPrefixSkuName || (KnownPublicIPPrefixSkuName = {}));
/** Known values of {@link PublicIPPrefixSkuTier} that the service accepts. */
export var KnownPublicIPPrefixSkuTier;
(function (KnownPublicIPPrefixSkuTier) {
    KnownPublicIPPrefixSkuTier["Regional"] = "Regional";
    KnownPublicIPPrefixSkuTier["Global"] = "Global";
})(KnownPublicIPPrefixSkuTier || (KnownPublicIPPrefixSkuTier = {}));
/** Known values of {@link RouteFilterRuleType} that the service accepts. */
export var KnownRouteFilterRuleType;
(function (KnownRouteFilterRuleType) {
    KnownRouteFilterRuleType["Community"] = "Community";
})(KnownRouteFilterRuleType || (KnownRouteFilterRuleType = {}));
/** Known values of {@link SecurityProviderName} that the service accepts. */
export var KnownSecurityProviderName;
(function (KnownSecurityProviderName) {
    KnownSecurityProviderName["ZScaler"] = "ZScaler";
    KnownSecurityProviderName["IBoss"] = "IBoss";
    KnownSecurityProviderName["Checkpoint"] = "Checkpoint";
})(KnownSecurityProviderName || (KnownSecurityProviderName = {}));
/** Known values of {@link SecurityPartnerProviderConnectionStatus} that the service accepts. */
export var KnownSecurityPartnerProviderConnectionStatus;
(function (KnownSecurityPartnerProviderConnectionStatus) {
    KnownSecurityPartnerProviderConnectionStatus["Unknown"] = "Unknown";
    KnownSecurityPartnerProviderConnectionStatus["PartiallyConnected"] = "PartiallyConnected";
    KnownSecurityPartnerProviderConnectionStatus["Connected"] = "Connected";
    KnownSecurityPartnerProviderConnectionStatus["NotConnected"] = "NotConnected";
})(KnownSecurityPartnerProviderConnectionStatus || (KnownSecurityPartnerProviderConnectionStatus = {}));
/** Known values of {@link UsageUnit} that the service accepts. */
export var KnownUsageUnit;
(function (KnownUsageUnit) {
    KnownUsageUnit["Count"] = "Count";
})(KnownUsageUnit || (KnownUsageUnit = {}));
/** Known values of {@link VirtualNetworkEncryptionEnforcement} that the service accepts. */
export var KnownVirtualNetworkEncryptionEnforcement;
(function (KnownVirtualNetworkEncryptionEnforcement) {
    KnownVirtualNetworkEncryptionEnforcement["DropUnencrypted"] = "DropUnencrypted";
    KnownVirtualNetworkEncryptionEnforcement["AllowUnencrypted"] = "AllowUnencrypted";
})(KnownVirtualNetworkEncryptionEnforcement || (KnownVirtualNetworkEncryptionEnforcement = {}));
/** Known values of {@link VirtualNetworkPeeringState} that the service accepts. */
export var KnownVirtualNetworkPeeringState;
(function (KnownVirtualNetworkPeeringState) {
    KnownVirtualNetworkPeeringState["Initiated"] = "Initiated";
    KnownVirtualNetworkPeeringState["Connected"] = "Connected";
    KnownVirtualNetworkPeeringState["Disconnected"] = "Disconnected";
})(KnownVirtualNetworkPeeringState || (KnownVirtualNetworkPeeringState = {}));
/** Known values of {@link VirtualNetworkPeeringLevel} that the service accepts. */
export var KnownVirtualNetworkPeeringLevel;
(function (KnownVirtualNetworkPeeringLevel) {
    KnownVirtualNetworkPeeringLevel["FullyInSync"] = "FullyInSync";
    KnownVirtualNetworkPeeringLevel["RemoteNotInSync"] = "RemoteNotInSync";
    KnownVirtualNetworkPeeringLevel["LocalNotInSync"] = "LocalNotInSync";
    KnownVirtualNetworkPeeringLevel["LocalAndRemoteNotInSync"] = "LocalAndRemoteNotInSync";
})(KnownVirtualNetworkPeeringLevel || (KnownVirtualNetworkPeeringLevel = {}));
/** Known values of {@link SyncRemoteAddressSpace} that the service accepts. */
export var KnownSyncRemoteAddressSpace;
(function (KnownSyncRemoteAddressSpace) {
    KnownSyncRemoteAddressSpace["True"] = "true";
})(KnownSyncRemoteAddressSpace || (KnownSyncRemoteAddressSpace = {}));
/** Known values of {@link VirtualNetworkGatewayType} that the service accepts. */
export var KnownVirtualNetworkGatewayType;
(function (KnownVirtualNetworkGatewayType) {
    KnownVirtualNetworkGatewayType["Vpn"] = "Vpn";
    KnownVirtualNetworkGatewayType["ExpressRoute"] = "ExpressRoute";
    KnownVirtualNetworkGatewayType["LocalGateway"] = "LocalGateway";
})(KnownVirtualNetworkGatewayType || (KnownVirtualNetworkGatewayType = {}));
/** Known values of {@link VpnType} that the service accepts. */
export var KnownVpnType;
(function (KnownVpnType) {
    KnownVpnType["PolicyBased"] = "PolicyBased";
    KnownVpnType["RouteBased"] = "RouteBased";
})(KnownVpnType || (KnownVpnType = {}));
/** Known values of {@link VpnGatewayGeneration} that the service accepts. */
export var KnownVpnGatewayGeneration;
(function (KnownVpnGatewayGeneration) {
    KnownVpnGatewayGeneration["None"] = "None";
    KnownVpnGatewayGeneration["Generation1"] = "Generation1";
    KnownVpnGatewayGeneration["Generation2"] = "Generation2";
})(KnownVpnGatewayGeneration || (KnownVpnGatewayGeneration = {}));
/** Known values of {@link VirtualNetworkGatewaySkuName} that the service accepts. */
export var KnownVirtualNetworkGatewaySkuName;
(function (KnownVirtualNetworkGatewaySkuName) {
    KnownVirtualNetworkGatewaySkuName["Basic"] = "Basic";
    KnownVirtualNetworkGatewaySkuName["HighPerformance"] = "HighPerformance";
    KnownVirtualNetworkGatewaySkuName["Standard"] = "Standard";
    KnownVirtualNetworkGatewaySkuName["UltraPerformance"] = "UltraPerformance";
    KnownVirtualNetworkGatewaySkuName["VpnGw1"] = "VpnGw1";
    KnownVirtualNetworkGatewaySkuName["VpnGw2"] = "VpnGw2";
    KnownVirtualNetworkGatewaySkuName["VpnGw3"] = "VpnGw3";
    KnownVirtualNetworkGatewaySkuName["VpnGw4"] = "VpnGw4";
    KnownVirtualNetworkGatewaySkuName["VpnGw5"] = "VpnGw5";
    KnownVirtualNetworkGatewaySkuName["VpnGw1AZ"] = "VpnGw1AZ";
    KnownVirtualNetworkGatewaySkuName["VpnGw2AZ"] = "VpnGw2AZ";
    KnownVirtualNetworkGatewaySkuName["VpnGw3AZ"] = "VpnGw3AZ";
    KnownVirtualNetworkGatewaySkuName["VpnGw4AZ"] = "VpnGw4AZ";
    KnownVirtualNetworkGatewaySkuName["VpnGw5AZ"] = "VpnGw5AZ";
    KnownVirtualNetworkGatewaySkuName["ErGw1AZ"] = "ErGw1AZ";
    KnownVirtualNetworkGatewaySkuName["ErGw2AZ"] = "ErGw2AZ";
    KnownVirtualNetworkGatewaySkuName["ErGw3AZ"] = "ErGw3AZ";
})(KnownVirtualNetworkGatewaySkuName || (KnownVirtualNetworkGatewaySkuName = {}));
/** Known values of {@link VirtualNetworkGatewaySkuTier} that the service accepts. */
export var KnownVirtualNetworkGatewaySkuTier;
(function (KnownVirtualNetworkGatewaySkuTier) {
    KnownVirtualNetworkGatewaySkuTier["Basic"] = "Basic";
    KnownVirtualNetworkGatewaySkuTier["HighPerformance"] = "HighPerformance";
    KnownVirtualNetworkGatewaySkuTier["Standard"] = "Standard";
    KnownVirtualNetworkGatewaySkuTier["UltraPerformance"] = "UltraPerformance";
    KnownVirtualNetworkGatewaySkuTier["VpnGw1"] = "VpnGw1";
    KnownVirtualNetworkGatewaySkuTier["VpnGw2"] = "VpnGw2";
    KnownVirtualNetworkGatewaySkuTier["VpnGw3"] = "VpnGw3";
    KnownVirtualNetworkGatewaySkuTier["VpnGw4"] = "VpnGw4";
    KnownVirtualNetworkGatewaySkuTier["VpnGw5"] = "VpnGw5";
    KnownVirtualNetworkGatewaySkuTier["VpnGw1AZ"] = "VpnGw1AZ";
    KnownVirtualNetworkGatewaySkuTier["VpnGw2AZ"] = "VpnGw2AZ";
    KnownVirtualNetworkGatewaySkuTier["VpnGw3AZ"] = "VpnGw3AZ";
    KnownVirtualNetworkGatewaySkuTier["VpnGw4AZ"] = "VpnGw4AZ";
    KnownVirtualNetworkGatewaySkuTier["VpnGw5AZ"] = "VpnGw5AZ";
    KnownVirtualNetworkGatewaySkuTier["ErGw1AZ"] = "ErGw1AZ";
    KnownVirtualNetworkGatewaySkuTier["ErGw2AZ"] = "ErGw2AZ";
    KnownVirtualNetworkGatewaySkuTier["ErGw3AZ"] = "ErGw3AZ";
})(KnownVirtualNetworkGatewaySkuTier || (KnownVirtualNetworkGatewaySkuTier = {}));
/** Known values of {@link VpnClientProtocol} that the service accepts. */
export var KnownVpnClientProtocol;
(function (KnownVpnClientProtocol) {
    KnownVpnClientProtocol["IkeV2"] = "IkeV2";
    KnownVpnClientProtocol["Sstp"] = "SSTP";
    KnownVpnClientProtocol["OpenVPN"] = "OpenVPN";
})(KnownVpnClientProtocol || (KnownVpnClientProtocol = {}));
/** Known values of {@link VpnAuthenticationType} that the service accepts. */
export var KnownVpnAuthenticationType;
(function (KnownVpnAuthenticationType) {
    KnownVpnAuthenticationType["Certificate"] = "Certificate";
    KnownVpnAuthenticationType["Radius"] = "Radius";
    KnownVpnAuthenticationType["AAD"] = "AAD";
})(KnownVpnAuthenticationType || (KnownVpnAuthenticationType = {}));
/** Known values of {@link IpsecEncryption} that the service accepts. */
export var KnownIpsecEncryption;
(function (KnownIpsecEncryption) {
    KnownIpsecEncryption["None"] = "None";
    KnownIpsecEncryption["DES"] = "DES";
    KnownIpsecEncryption["DES3"] = "DES3";
    KnownIpsecEncryption["AES128"] = "AES128";
    KnownIpsecEncryption["AES192"] = "AES192";
    KnownIpsecEncryption["AES256"] = "AES256";
    KnownIpsecEncryption["Gcmaes128"] = "GCMAES128";
    KnownIpsecEncryption["Gcmaes192"] = "GCMAES192";
    KnownIpsecEncryption["Gcmaes256"] = "GCMAES256";
})(KnownIpsecEncryption || (KnownIpsecEncryption = {}));
/** Known values of {@link IpsecIntegrity} that the service accepts. */
export var KnownIpsecIntegrity;
(function (KnownIpsecIntegrity) {
    KnownIpsecIntegrity["MD5"] = "MD5";
    KnownIpsecIntegrity["SHA1"] = "SHA1";
    KnownIpsecIntegrity["SHA256"] = "SHA256";
    KnownIpsecIntegrity["Gcmaes128"] = "GCMAES128";
    KnownIpsecIntegrity["Gcmaes192"] = "GCMAES192";
    KnownIpsecIntegrity["Gcmaes256"] = "GCMAES256";
})(KnownIpsecIntegrity || (KnownIpsecIntegrity = {}));
/** Known values of {@link IkeEncryption} that the service accepts. */
export var KnownIkeEncryption;
(function (KnownIkeEncryption) {
    KnownIkeEncryption["DES"] = "DES";
    KnownIkeEncryption["DES3"] = "DES3";
    KnownIkeEncryption["AES128"] = "AES128";
    KnownIkeEncryption["AES192"] = "AES192";
    KnownIkeEncryption["AES256"] = "AES256";
    KnownIkeEncryption["Gcmaes256"] = "GCMAES256";
    KnownIkeEncryption["Gcmaes128"] = "GCMAES128";
})(KnownIkeEncryption || (KnownIkeEncryption = {}));
/** Known values of {@link IkeIntegrity} that the service accepts. */
export var KnownIkeIntegrity;
(function (KnownIkeIntegrity) {
    KnownIkeIntegrity["MD5"] = "MD5";
    KnownIkeIntegrity["SHA1"] = "SHA1";
    KnownIkeIntegrity["SHA256"] = "SHA256";
    KnownIkeIntegrity["SHA384"] = "SHA384";
    KnownIkeIntegrity["Gcmaes256"] = "GCMAES256";
    KnownIkeIntegrity["Gcmaes128"] = "GCMAES128";
})(KnownIkeIntegrity || (KnownIkeIntegrity = {}));
/** Known values of {@link DhGroup} that the service accepts. */
export var KnownDhGroup;
(function (KnownDhGroup) {
    KnownDhGroup["None"] = "None";
    KnownDhGroup["DHGroup1"] = "DHGroup1";
    KnownDhGroup["DHGroup2"] = "DHGroup2";
    KnownDhGroup["DHGroup14"] = "DHGroup14";
    KnownDhGroup["DHGroup2048"] = "DHGroup2048";
    KnownDhGroup["ECP256"] = "ECP256";
    KnownDhGroup["ECP384"] = "ECP384";
    KnownDhGroup["DHGroup24"] = "DHGroup24";
})(KnownDhGroup || (KnownDhGroup = {}));
/** Known values of {@link PfsGroup} that the service accepts. */
export var KnownPfsGroup;
(function (KnownPfsGroup) {
    KnownPfsGroup["None"] = "None";
    KnownPfsGroup["PFS1"] = "PFS1";
    KnownPfsGroup["PFS2"] = "PFS2";
    KnownPfsGroup["PFS2048"] = "PFS2048";
    KnownPfsGroup["ECP256"] = "ECP256";
    KnownPfsGroup["ECP384"] = "ECP384";
    KnownPfsGroup["PFS24"] = "PFS24";
    KnownPfsGroup["PFS14"] = "PFS14";
    KnownPfsGroup["Pfsmm"] = "PFSMM";
})(KnownPfsGroup || (KnownPfsGroup = {}));
/** Known values of {@link VpnNatRuleType} that the service accepts. */
export var KnownVpnNatRuleType;
(function (KnownVpnNatRuleType) {
    KnownVpnNatRuleType["Static"] = "Static";
    KnownVpnNatRuleType["Dynamic"] = "Dynamic";
})(KnownVpnNatRuleType || (KnownVpnNatRuleType = {}));
/** Known values of {@link VpnNatRuleMode} that the service accepts. */
export var KnownVpnNatRuleMode;
(function (KnownVpnNatRuleMode) {
    KnownVpnNatRuleMode["EgressSnat"] = "EgressSnat";
    KnownVpnNatRuleMode["IngressSnat"] = "IngressSnat";
})(KnownVpnNatRuleMode || (KnownVpnNatRuleMode = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionType} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionType;
(function (KnownVirtualNetworkGatewayConnectionType) {
    KnownVirtualNetworkGatewayConnectionType["IPsec"] = "IPsec";
    KnownVirtualNetworkGatewayConnectionType["Vnet2Vnet"] = "Vnet2Vnet";
    KnownVirtualNetworkGatewayConnectionType["ExpressRoute"] = "ExpressRoute";
    KnownVirtualNetworkGatewayConnectionType["VPNClient"] = "VPNClient";
})(KnownVirtualNetworkGatewayConnectionType || (KnownVirtualNetworkGatewayConnectionType = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionProtocol} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionProtocol;
(function (KnownVirtualNetworkGatewayConnectionProtocol) {
    KnownVirtualNetworkGatewayConnectionProtocol["IKEv2"] = "IKEv2";
    KnownVirtualNetworkGatewayConnectionProtocol["IKEv1"] = "IKEv1";
})(KnownVirtualNetworkGatewayConnectionProtocol || (KnownVirtualNetworkGatewayConnectionProtocol = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionMode} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionMode;
(function (KnownVirtualNetworkGatewayConnectionMode) {
    KnownVirtualNetworkGatewayConnectionMode["Default"] = "Default";
    KnownVirtualNetworkGatewayConnectionMode["ResponderOnly"] = "ResponderOnly";
    KnownVirtualNetworkGatewayConnectionMode["InitiatorOnly"] = "InitiatorOnly";
})(KnownVirtualNetworkGatewayConnectionMode || (KnownVirtualNetworkGatewayConnectionMode = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionStatus} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionStatus;
(function (KnownVirtualNetworkGatewayConnectionStatus) {
    KnownVirtualNetworkGatewayConnectionStatus["Unknown"] = "Unknown";
    KnownVirtualNetworkGatewayConnectionStatus["Connecting"] = "Connecting";
    KnownVirtualNetworkGatewayConnectionStatus["Connected"] = "Connected";
    KnownVirtualNetworkGatewayConnectionStatus["NotConnected"] = "NotConnected";
})(KnownVirtualNetworkGatewayConnectionStatus || (KnownVirtualNetworkGatewayConnectionStatus = {}));
/** Known values of {@link ProcessorArchitecture} that the service accepts. */
export var KnownProcessorArchitecture;
(function (KnownProcessorArchitecture) {
    KnownProcessorArchitecture["Amd64"] = "Amd64";
    KnownProcessorArchitecture["X86"] = "X86";
})(KnownProcessorArchitecture || (KnownProcessorArchitecture = {}));
/** Known values of {@link AuthenticationMethod} that the service accepts. */
export var KnownAuthenticationMethod;
(function (KnownAuthenticationMethod) {
    KnownAuthenticationMethod["Eaptls"] = "EAPTLS";
    KnownAuthenticationMethod["EapmschaPv2"] = "EAPMSCHAPv2";
})(KnownAuthenticationMethod || (KnownAuthenticationMethod = {}));
/** Known values of {@link BgpPeerState} that the service accepts. */
export var KnownBgpPeerState;
(function (KnownBgpPeerState) {
    KnownBgpPeerState["Unknown"] = "Unknown";
    KnownBgpPeerState["Stopped"] = "Stopped";
    KnownBgpPeerState["Idle"] = "Idle";
    KnownBgpPeerState["Connecting"] = "Connecting";
    KnownBgpPeerState["Connected"] = "Connected";
})(KnownBgpPeerState || (KnownBgpPeerState = {}));
/** Known values of {@link OfficeTrafficCategory} that the service accepts. */
export var KnownOfficeTrafficCategory;
(function (KnownOfficeTrafficCategory) {
    KnownOfficeTrafficCategory["Optimize"] = "Optimize";
    KnownOfficeTrafficCategory["OptimizeAndAllow"] = "OptimizeAndAllow";
    KnownOfficeTrafficCategory["All"] = "All";
    KnownOfficeTrafficCategory["None"] = "None";
})(KnownOfficeTrafficCategory || (KnownOfficeTrafficCategory = {}));
/** Known values of {@link VirtualWanSecurityProviderType} that the service accepts. */
export var KnownVirtualWanSecurityProviderType;
(function (KnownVirtualWanSecurityProviderType) {
    KnownVirtualWanSecurityProviderType["External"] = "External";
    KnownVirtualWanSecurityProviderType["Native"] = "Native";
})(KnownVirtualWanSecurityProviderType || (KnownVirtualWanSecurityProviderType = {}));
/** Known values of {@link VpnGatewayTunnelingProtocol} that the service accepts. */
export var KnownVpnGatewayTunnelingProtocol;
(function (KnownVpnGatewayTunnelingProtocol) {
    KnownVpnGatewayTunnelingProtocol["IkeV2"] = "IkeV2";
    KnownVpnGatewayTunnelingProtocol["OpenVPN"] = "OpenVPN";
})(KnownVpnGatewayTunnelingProtocol || (KnownVpnGatewayTunnelingProtocol = {}));
/** Known values of {@link RoutingState} that the service accepts. */
export var KnownRoutingState;
(function (KnownRoutingState) {
    KnownRoutingState["None"] = "None";
    KnownRoutingState["Provisioned"] = "Provisioned";
    KnownRoutingState["Provisioning"] = "Provisioning";
    KnownRoutingState["Failed"] = "Failed";
})(KnownRoutingState || (KnownRoutingState = {}));
/** Known values of {@link PreferredRoutingGateway} that the service accepts. */
export var KnownPreferredRoutingGateway;
(function (KnownPreferredRoutingGateway) {
    KnownPreferredRoutingGateway["ExpressRoute"] = "ExpressRoute";
    KnownPreferredRoutingGateway["VpnGateway"] = "VpnGateway";
    KnownPreferredRoutingGateway["None"] = "None";
})(KnownPreferredRoutingGateway || (KnownPreferredRoutingGateway = {}));
/** Known values of {@link VpnConnectionStatus} that the service accepts. */
export var KnownVpnConnectionStatus;
(function (KnownVpnConnectionStatus) {
    KnownVpnConnectionStatus["Unknown"] = "Unknown";
    KnownVpnConnectionStatus["Connecting"] = "Connecting";
    KnownVpnConnectionStatus["Connected"] = "Connected";
    KnownVpnConnectionStatus["NotConnected"] = "NotConnected";
})(KnownVpnConnectionStatus || (KnownVpnConnectionStatus = {}));
/** Known values of {@link VpnLinkConnectionMode} that the service accepts. */
export var KnownVpnLinkConnectionMode;
(function (KnownVpnLinkConnectionMode) {
    KnownVpnLinkConnectionMode["Default"] = "Default";
    KnownVpnLinkConnectionMode["ResponderOnly"] = "ResponderOnly";
    KnownVpnLinkConnectionMode["InitiatorOnly"] = "InitiatorOnly";
})(KnownVpnLinkConnectionMode || (KnownVpnLinkConnectionMode = {}));
/** Known values of {@link HubBgpConnectionStatus} that the service accepts. */
export var KnownHubBgpConnectionStatus;
(function (KnownHubBgpConnectionStatus) {
    KnownHubBgpConnectionStatus["Unknown"] = "Unknown";
    KnownHubBgpConnectionStatus["Connecting"] = "Connecting";
    KnownHubBgpConnectionStatus["Connected"] = "Connected";
    KnownHubBgpConnectionStatus["NotConnected"] = "NotConnected";
})(KnownHubBgpConnectionStatus || (KnownHubBgpConnectionStatus = {}));
/** Known values of {@link WebApplicationFirewallEnabledState} that the service accepts. */
export var KnownWebApplicationFirewallEnabledState;
(function (KnownWebApplicationFirewallEnabledState) {
    KnownWebApplicationFirewallEnabledState["Disabled"] = "Disabled";
    KnownWebApplicationFirewallEnabledState["Enabled"] = "Enabled";
})(KnownWebApplicationFirewallEnabledState || (KnownWebApplicationFirewallEnabledState = {}));
/** Known values of {@link WebApplicationFirewallMode} that the service accepts. */
export var KnownWebApplicationFirewallMode;
(function (KnownWebApplicationFirewallMode) {
    KnownWebApplicationFirewallMode["Prevention"] = "Prevention";
    KnownWebApplicationFirewallMode["Detection"] = "Detection";
})(KnownWebApplicationFirewallMode || (KnownWebApplicationFirewallMode = {}));
/** Known values of {@link WebApplicationFirewallRuleType} that the service accepts. */
export var KnownWebApplicationFirewallRuleType;
(function (KnownWebApplicationFirewallRuleType) {
    KnownWebApplicationFirewallRuleType["MatchRule"] = "MatchRule";
    KnownWebApplicationFirewallRuleType["Invalid"] = "Invalid";
})(KnownWebApplicationFirewallRuleType || (KnownWebApplicationFirewallRuleType = {}));
/** Known values of {@link WebApplicationFirewallMatchVariable} that the service accepts. */
export var KnownWebApplicationFirewallMatchVariable;
(function (KnownWebApplicationFirewallMatchVariable) {
    KnownWebApplicationFirewallMatchVariable["RemoteAddr"] = "RemoteAddr";
    KnownWebApplicationFirewallMatchVariable["RequestMethod"] = "RequestMethod";
    KnownWebApplicationFirewallMatchVariable["QueryString"] = "QueryString";
    KnownWebApplicationFirewallMatchVariable["PostArgs"] = "PostArgs";
    KnownWebApplicationFirewallMatchVariable["RequestUri"] = "RequestUri";
    KnownWebApplicationFirewallMatchVariable["RequestHeaders"] = "RequestHeaders";
    KnownWebApplicationFirewallMatchVariable["RequestBody"] = "RequestBody";
    KnownWebApplicationFirewallMatchVariable["RequestCookies"] = "RequestCookies";
})(KnownWebApplicationFirewallMatchVariable || (KnownWebApplicationFirewallMatchVariable = {}));
/** Known values of {@link WebApplicationFirewallOperator} that the service accepts. */
export var KnownWebApplicationFirewallOperator;
(function (KnownWebApplicationFirewallOperator) {
    KnownWebApplicationFirewallOperator["IPMatch"] = "IPMatch";
    KnownWebApplicationFirewallOperator["Equal"] = "Equal";
    KnownWebApplicationFirewallOperator["Contains"] = "Contains";
    KnownWebApplicationFirewallOperator["LessThan"] = "LessThan";
    KnownWebApplicationFirewallOperator["GreaterThan"] = "GreaterThan";
    KnownWebApplicationFirewallOperator["LessThanOrEqual"] = "LessThanOrEqual";
    KnownWebApplicationFirewallOperator["GreaterThanOrEqual"] = "GreaterThanOrEqual";
    KnownWebApplicationFirewallOperator["BeginsWith"] = "BeginsWith";
    KnownWebApplicationFirewallOperator["EndsWith"] = "EndsWith";
    KnownWebApplicationFirewallOperator["Regex"] = "Regex";
    KnownWebApplicationFirewallOperator["GeoMatch"] = "GeoMatch";
})(KnownWebApplicationFirewallOperator || (KnownWebApplicationFirewallOperator = {}));
/** Known values of {@link WebApplicationFirewallTransform} that the service accepts. */
export var KnownWebApplicationFirewallTransform;
(function (KnownWebApplicationFirewallTransform) {
    KnownWebApplicationFirewallTransform["Lowercase"] = "Lowercase";
    KnownWebApplicationFirewallTransform["Trim"] = "Trim";
    KnownWebApplicationFirewallTransform["UrlDecode"] = "UrlDecode";
    KnownWebApplicationFirewallTransform["UrlEncode"] = "UrlEncode";
    KnownWebApplicationFirewallTransform["RemoveNulls"] = "RemoveNulls";
    KnownWebApplicationFirewallTransform["HtmlEntityDecode"] = "HtmlEntityDecode";
})(KnownWebApplicationFirewallTransform || (KnownWebApplicationFirewallTransform = {}));
/** Known values of {@link WebApplicationFirewallAction} that the service accepts. */
export var KnownWebApplicationFirewallAction;
(function (KnownWebApplicationFirewallAction) {
    KnownWebApplicationFirewallAction["Allow"] = "Allow";
    KnownWebApplicationFirewallAction["Block"] = "Block";
    KnownWebApplicationFirewallAction["Log"] = "Log";
})(KnownWebApplicationFirewallAction || (KnownWebApplicationFirewallAction = {}));
/** Known values of {@link WebApplicationFirewallPolicyResourceState} that the service accepts. */
export var KnownWebApplicationFirewallPolicyResourceState;
(function (KnownWebApplicationFirewallPolicyResourceState) {
    KnownWebApplicationFirewallPolicyResourceState["Creating"] = "Creating";
    KnownWebApplicationFirewallPolicyResourceState["Enabling"] = "Enabling";
    KnownWebApplicationFirewallPolicyResourceState["Enabled"] = "Enabled";
    KnownWebApplicationFirewallPolicyResourceState["Disabling"] = "Disabling";
    KnownWebApplicationFirewallPolicyResourceState["Disabled"] = "Disabled";
    KnownWebApplicationFirewallPolicyResourceState["Deleting"] = "Deleting";
})(KnownWebApplicationFirewallPolicyResourceState || (KnownWebApplicationFirewallPolicyResourceState = {}));
/** Known values of {@link OwaspCrsExclusionEntryMatchVariable} that the service accepts. */
export var KnownOwaspCrsExclusionEntryMatchVariable;
(function (KnownOwaspCrsExclusionEntryMatchVariable) {
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderNames"] = "RequestHeaderNames";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieNames"] = "RequestCookieNames";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgNames"] = "RequestArgNames";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderKeys"] = "RequestHeaderKeys";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderValues"] = "RequestHeaderValues";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieKeys"] = "RequestCookieKeys";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieValues"] = "RequestCookieValues";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgKeys"] = "RequestArgKeys";
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgValues"] = "RequestArgValues";
})(KnownOwaspCrsExclusionEntryMatchVariable || (KnownOwaspCrsExclusionEntryMatchVariable = {}));
/** Known values of {@link OwaspCrsExclusionEntrySelectorMatchOperator} that the service accepts. */
export var KnownOwaspCrsExclusionEntrySelectorMatchOperator;
(function (KnownOwaspCrsExclusionEntrySelectorMatchOperator) {
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["Equals"] = "Equals";
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["Contains"] = "Contains";
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["StartsWith"] = "StartsWith";
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["EndsWith"] = "EndsWith";
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["EqualsAny"] = "EqualsAny";
})(KnownOwaspCrsExclusionEntrySelectorMatchOperator || (KnownOwaspCrsExclusionEntrySelectorMatchOperator = {}));
/** Known values of {@link ManagedRuleEnabledState} that the service accepts. */
export var KnownManagedRuleEnabledState;
(function (KnownManagedRuleEnabledState) {
    KnownManagedRuleEnabledState["Disabled"] = "Disabled";
})(KnownManagedRuleEnabledState || (KnownManagedRuleEnabledState = {}));
/** Known values of {@link FirewallPolicyNatRuleCollectionActionType} that the service accepts. */
export var KnownFirewallPolicyNatRuleCollectionActionType;
(function (KnownFirewallPolicyNatRuleCollectionActionType) {
    KnownFirewallPolicyNatRuleCollectionActionType["Dnat"] = "DNAT";
})(KnownFirewallPolicyNatRuleCollectionActionType || (KnownFirewallPolicyNatRuleCollectionActionType = {}));
/** Known values of {@link FirewallPolicyRuleType} that the service accepts. */
export var KnownFirewallPolicyRuleType;
(function (KnownFirewallPolicyRuleType) {
    KnownFirewallPolicyRuleType["ApplicationRule"] = "ApplicationRule";
    KnownFirewallPolicyRuleType["NetworkRule"] = "NetworkRule";
    KnownFirewallPolicyRuleType["NatRule"] = "NatRule";
})(KnownFirewallPolicyRuleType || (KnownFirewallPolicyRuleType = {}));
/** Known values of {@link FirewallPolicyFilterRuleCollectionActionType} that the service accepts. */
export var KnownFirewallPolicyFilterRuleCollectionActionType;
(function (KnownFirewallPolicyFilterRuleCollectionActionType) {
    KnownFirewallPolicyFilterRuleCollectionActionType["Allow"] = "Allow";
    KnownFirewallPolicyFilterRuleCollectionActionType["Deny"] = "Deny";
})(KnownFirewallPolicyFilterRuleCollectionActionType || (KnownFirewallPolicyFilterRuleCollectionActionType = {}));
/** Known values of {@link FirewallPolicyRuleApplicationProtocolType} that the service accepts. */
export var KnownFirewallPolicyRuleApplicationProtocolType;
(function (KnownFirewallPolicyRuleApplicationProtocolType) {
    KnownFirewallPolicyRuleApplicationProtocolType["Http"] = "Http";
    KnownFirewallPolicyRuleApplicationProtocolType["Https"] = "Https";
})(KnownFirewallPolicyRuleApplicationProtocolType || (KnownFirewallPolicyRuleApplicationProtocolType = {}));
/** Known values of {@link FirewallPolicyRuleNetworkProtocol} that the service accepts. */
export var KnownFirewallPolicyRuleNetworkProtocol;
(function (KnownFirewallPolicyRuleNetworkProtocol) {
    KnownFirewallPolicyRuleNetworkProtocol["TCP"] = "TCP";
    KnownFirewallPolicyRuleNetworkProtocol["UDP"] = "UDP";
    KnownFirewallPolicyRuleNetworkProtocol["Any"] = "Any";
    KnownFirewallPolicyRuleNetworkProtocol["Icmp"] = "ICMP";
})(KnownFirewallPolicyRuleNetworkProtocol || (KnownFirewallPolicyRuleNetworkProtocol = {}));
/** Known values of {@link NetworkOperationStatus} that the service accepts. */
export var KnownNetworkOperationStatus;
(function (KnownNetworkOperationStatus) {
    KnownNetworkOperationStatus["InProgress"] = "InProgress";
    KnownNetworkOperationStatus["Succeeded"] = "Succeeded";
    KnownNetworkOperationStatus["Failed"] = "Failed";
})(KnownNetworkOperationStatus || (KnownNetworkOperationStatus = {}));
/** Known values of {@link TunnelConnectionStatus} that the service accepts. */
export var KnownTunnelConnectionStatus;
(function (KnownTunnelConnectionStatus) {
    KnownTunnelConnectionStatus["Unknown"] = "Unknown";
    KnownTunnelConnectionStatus["Connecting"] = "Connecting";
    KnownTunnelConnectionStatus["Connected"] = "Connected";
    KnownTunnelConnectionStatus["NotConnected"] = "NotConnected";
})(KnownTunnelConnectionStatus || (KnownTunnelConnectionStatus = {}));
/** Known values of {@link HubVirtualNetworkConnectionStatus} that the service accepts. */
export var KnownHubVirtualNetworkConnectionStatus;
(function (KnownHubVirtualNetworkConnectionStatus) {
    KnownHubVirtualNetworkConnectionStatus["Unknown"] = "Unknown";
    KnownHubVirtualNetworkConnectionStatus["Connecting"] = "Connecting";
    KnownHubVirtualNetworkConnectionStatus["Connected"] = "Connected";
    KnownHubVirtualNetworkConnectionStatus["NotConnected"] = "NotConnected";
})(KnownHubVirtualNetworkConnectionStatus || (KnownHubVirtualNetworkConnectionStatus = {}));
//# sourceMappingURL=index.js.map